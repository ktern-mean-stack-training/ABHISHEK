//====EXPRESS========
const express =require("express");
const app = express();
app.use(express.json())

//====JWT=========
const jwt = require('jsonwebtoken')
const secretkey = 'mysecret'

//====Mongodb=====
dbUrl = "mongodb://localhost:27017"
const userModel = require("./mongo");   // to import the mongodb file
const { MongoClient, ObjectId } = require("mongodb");

//=====MIDDLE========
// const verify = require('./middle') 

//======================================================================================================================================
//=====MIDDLEWARE code for authorization========
const verifyToken = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (authHeader) {
    const token = authHeader.split(" ")[1];
    jwt.verify(token, secretkey, (err, user) => {
      if (err) {
        return res.send("invalid token, check with it again");
      }
      req.user = user;
      next();
    });
  } else {
    res.send("token should be present in autherization header");
  }
};
//======================================================================================================================================

//To register the student and saving the data into database
app.post("/register", async (req,res)=>{        
    dbUrl = "mongodb://localhost:27017"  //url of the database
    dbName = "CLASS"                    //name of the db working on
    const userdetails = req.body;       // variable to assign the user input
    const addUser = await userModel.addUserDetails(dbUrl, dbName, userdetails) //variable to call the required function 
                                                                //(moves to mongo file, with parsing url and name of the 
                                                                // db, along with user input)                           
    res.send({                  //sending the res to the client
        // addUser,
        msg:"student register successfully"
    
    })
})
//======================================================================================================================================
// To authenticate the student and giving him an authorization token
//enter correct username and password, a token will be generated, use the same token for every function

app.get("/login", async (req, res, next)=>{
dbUrl ="mongodb://localhost:27017"
dbName = "CLASS"

const userdetails = req.body;

const usermail = req.body.email;
const password = req.body.password

const getUser = await userModel.getUserDetails(dbUrl,dbName, usermail, password)
// to check the user details and generating a autherization token
if (getUser !== null){

    console.log(getUser.password)
    const token = jwt.sign(getUser, secretkey, { expiresIn: '1h' });

    //to route object id of the user with the refid of marks collection
    const client = await MongoClient.connect(dbUrl);

    Obj = getUser._id.toString()

    const marks = await client
        .db(dbName)
        .collection("marks")
        .findOne({refid: getUser._id})

    if (marks !== null){
        res.send({
            token, msg:"keep this in showmarks router to get yout marks",Obj
        })
    }

    else{
        res.send({token,msg: "Logged in successfully, Please add your marks in [addmarks]router, Thank You","this is your user id":Obj})
    }

    // name = getUser.email
    // console.log(marks)
    // console.log(getUser._id)
    // console.log(Obj)
    // console.log(req.headers.authorization) // to access the token
    // res.send({
    //     marks, name, token
    // })

}

else {
    res.status(401).send({error: "invalid email or password"})

}
});

//=====================================================================================================================================
//To give the marks for each student [a post method, to give marks for each student]
       // place the token generated upon login in authorization and mention the id of the user.
       // ensure that the token placed was not the one generated by previous login

       app.post("/addmarks/:id",verifyToken,async(req,res)=>{
        dbName = "CLASS"
        const userdetails = req.body;
        const userId= req.params.id
        const id = new ObjectId((userId))
        const addmarks = await userModel.addmarks(dbUrl,dbName,userdetails,userId)
    
        
        res.send({
            msg: "marks added successfully"
        })
    })
//======================================================================================================================================    
    
    
// To get the marks of the authenticated user upon keeping the token in headers.authorization
// keep the same token that was generated upon logging in.

app.get("/showmarks", verifyToken, async (req, res) => {
    const dbName = "CLASS";
    const client = await MongoClient.connect(dbUrl);

    console.log({refid:new ObjectId(req.user._id)})
  
    const marks = await client
      .db(dbName)
      .collection("marks")
      // .findOne({ refid: req.user._id.toString() });
      // .findOne({ refid: req.user._id.toString() });
      .findOne({refid:new ObjectId(req.user._id) })
      // .findOne(new ObjectId(req.user.refid))

      obj= req.user._id
  
    if (marks !== null) {
      res.send(marks)}

    else (res.send({msg:"please add your marks using [addmarks] router", obj}))
    })
//======================================================================================================================================
//========================================
app.listen(4000, () => {
    console.log("app running on port 4000");
  });
//========================================